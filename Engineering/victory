# Engineering/victory.py

import math
from .pathfinding import distance
from .consts import FPS, TILE_SIZE, UNIT_RADIUS

CAPTURE_RADIUS = 50.0  # On garde la logique de 50 px
CAPTURE_TIME   = 10.0  # On garde la logique de 10 s

def update_capital_capture(game, unit):
    """
    Gère la capture de capitale par 'unit',
    sans exiger de changement dans le reste du code.

    On conserve la logique de l'ex-script:
    - Si unit est bleue, on check la capitale rouge, etc.
    - On incrémente unit.cap_capture_time si on est < CAPTURE_RADIUS
      ET qu'aucun défenseur n'est à < CAPTURE_RADIUS.
    - Sinon, on reset.
    - On met à jour game.cap_red_timer ou game.cap_blue_timer
      selon le cas.
    """
    if unit.team == "blue":
        rx, ry = game.red_cap
        cx = rx*TILE_SIZE + TILE_SIZE/2
        cy = ry*TILE_SIZE + TILE_SIZE/2
        d  = distance(unit.x, unit.y, cx, cy)
        if d < CAPTURE_RADIUS:
            if not is_enemy_on_capital(game, "red"):
                unit.cap_capture_time += 1.0/FPS
                if unit.cap_capture_time > game.cap_red_timer:
                    game.cap_red_timer = unit.cap_capture_time
            else:
                unit.cap_capture_time = 0
        else:
            unit.cap_capture_time = 0
    else:
        bx, by = game.blue_cap
        cx = bx*TILE_SIZE + TILE_SIZE/2
        cy = by*TILE_SIZE + TILE_SIZE/2
        d  = distance(unit.x, unit.y, cx, cy)
        if d < CAPTURE_RADIUS:
            if not is_enemy_on_capital(game, "blue"):
                unit.cap_capture_time += 1.0/FPS
                if unit.cap_capture_time > game.cap_blue_timer:
                    game.cap_blue_timer = unit.cap_capture_time
            else:
                unit.cap_capture_time = 0
        else:
            unit.cap_capture_time = 0

def is_enemy_on_capital(game, cap_team):
    """
    Check si la capitale de 'cap_team' est défendue par au moins 1 unité
    à < CAPTURE_RADIUS.
    """
    if cap_team == "red":
        rx, ry  = game.red_cap
        cx       = rx*TILE_SIZE + TILE_SIZE/2
        cy       = ry*TILE_SIZE + TILE_SIZE/2
        defenders = game.red_units
    else:
        bx, by  = game.blue_cap
        cx       = bx*TILE_SIZE + TILE_SIZE/2
        cy       = by*TILE_SIZE + TILE_SIZE/2
        defenders = game.blue_units

    for u in defenders:
        if distance(u.x, u.y, cx, cy) < CAPTURE_RADIUS:
            return True
    return False

def check_victory(game):
    """
    Vérifie si une condition de victoire est atteinte:
    - plus d'unités bleues => rouge win
    - plus d'unités rouges => bleu win
    - capital rouge capturée => bleu win
    - capital bleue capturée => rouge win

    On modifie la variable game.victory_label pour l'afficher
    (pas besoin de changer ailleurs).
    """
    if not game.blue_units:
        game.victory_label = "Victoire Rouge (plus de bleus)!"
    if not game.red_units:
        game.victory_label = "Victoire Bleue (plus de rouges)!"
    if game.cap_red_timer >= CAPTURE_TIME:
        game.victory_label = "Victoire Bleue (capitale rouge)!"
    if game.cap_blue_timer >= CAPTURE_TIME:
        game.victory_label = "Victoire Rouge (capitale bleue)!"
