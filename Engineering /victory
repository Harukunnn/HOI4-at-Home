# Engineering/victory.py

import math
from .pathfinding import distance
from .consts import FPS, TILE_SIZE, UNIT_RADIUS

# Valeurs existantes
CAPTURE_TIME   = 10.0
CAPTURE_RADIUS = 50.0  # si besoin

def update_capital_capture(game, unit):
    """
    Gère la capture de la capitale par 'unit'.
    """
    if unit.team == "blue":
        rx, ry = game.red_cap
        cx = rx*TILE_SIZE + TILE_SIZE/2
        cy = ry*TILE_SIZE + TILE_SIZE/2
        d  = distance(unit.x, unit.y, cx, cy)
        if d < CAPTURE_RADIUS:
            if not is_enemy_on_capital(game, "red"):
                unit.cap_capture_time += 1.0/FPS
                if unit.cap_capture_time>game.cap_red_timer:
                    game.cap_red_timer=unit.cap_capture_time
            else:
                unit.cap_capture_time=0
        else:
            unit.cap_capture_time=0
    else:
        bx, by = game.blue_cap
        cx = bx*TILE_SIZE + TILE_SIZE/2
        cy = by*TILE_SIZE + TILE_SIZE/2
        d  = distance(unit.x, unit.y, cx, cy)
        if d < CAPTURE_RADIUS:
            if not is_enemy_on_capital(game, "blue"):
                unit.cap_capture_time+=1.0/FPS
                if unit.cap_capture_time>game.cap_blue_timer:
                    game.cap_blue_timer=unit.cap_capture_time
            else:
                unit.cap_capture_time=0
        else:
            unit.cap_capture_time=0

def is_enemy_on_capital(game, cap_team):
    """
    Vérifie si la capitale 'cap_team' est défendue 
    par au moins 1 unité de la même team à < CAPTURE_RADIUS.
    """
    if cap_team == "red":
        rx, ry   = game.red_cap
        cx       = rx*TILE_SIZE + TILE_SIZE/2
        cy       = ry*TILE_SIZE + TILE_SIZE/2
        defenders= game.red_units
    else:
        bx, by   = game.blue_cap
        cx       = bx*TILE_SIZE + TILE_SIZE/2
        cy       = by*TILE_SIZE + TILE_SIZE/2
        defenders= game.blue_units

    for u in defenders:
        if distance(u.x,u.y, cx,cy) < CAPTURE_RADIUS:
            return True
    return False

def check_victory(game):
    """
    Vérifie la victoire en tenant compte:
      - counters secrets _blue_count et _red_count
      - timers de capture capital
    Met game.victory_label si une condition est atteinte.
    """
    # 1) si _blue_count=0 => rouge gagne
    if game._blue_count <= 0:
        game.victory_label="Victoire Rouge (plus de bleus)!"
    # 2) si _red_count=0 => bleu gagne
    if game._red_count <= 0:
        game.victory_label="Victoire Bleue (plus de rouges)!"
    # 3) si capital rouge capturée => bleu gagne
    if game.cap_red_timer >= CAPTURE_TIME:
        game.victory_label="Victoire Bleue (capitale rouge)!"
    # 4) si capital bleue capturée => rouge gagne
    if game.cap_blue_timer >= CAPTURE_TIME:
        game.victory_label="Victoire Rouge (capitale bleue)!"
